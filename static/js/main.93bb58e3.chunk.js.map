{"version":3,"sources":["AddTaskForm.tsx","EditableSpan.tsx","TodoListHeader.tsx","Task.tsx","ControlButtons.tsx","TasksList.tsx","ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddTaskForm","props","useState","title","setTitle","error","setError","errorMessage","style","color","fontSize","errorInputClass","value","onChange","e","currentTarget","onKeyPress","key","addTask","className","onClick","trimmedTitle","trim","EditableSpan","edit","setEdit","oldTitle","newTitle","setNewTitle","autoFocus","onBlur","callBack","nameOfClass","TodoListHeader","updateTodoListTitle","todolistID","filter","removeTodoList","Task","completedClass","isDone","type","changeTaskStatus","id","checked","updateTask","updateTaskHandler","removeTask","ControlButtons","onCLickSetFilter","changeFilter","TasksList","tasksComponentsList","tasks","map","task","emptyMessage","tasksList","length","ToDoList","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","el","taskID","updateTitle","console","log","newID","tasksForTodolist","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.93bb58e3.chunk.js","sourcesContent":["import React , {useState , KeyboardEvent , ChangeEvent , CSSProperties} from 'react';\n\ntype AddTaskFormPropsType = {\n    addTask: ( title:string) =>void\n}\nconst AddTaskForm = (props:AddTaskFormPropsType) => {\n    const [title,setTitle] = useState<string>('')\n    const [error,setError] = useState<boolean>(false)\n    const onClickAddTask = () => {\n\n        const trimmedTitle = title.trim()\n        if(trimmedTitle){\n            props.addTask(trimmedTitle)\n        }\n        else {\n            setError(true)\n        }\n        setTitle('')\n    }\n    const onChangeSetTitle = (e:ChangeEvent<HTMLInputElement>) =>{\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressSetTitle = (e:KeyboardEvent<HTMLInputElement>) => {\n      if(e.key === 'Enter'){\n          props.addTask(title)\n          setTitle('')\n      }\n    }\n    const errorMessageStyle: CSSProperties= {\n        color:'red',\n        fontSize: '14px',\n    }\n\n    const errorMessage = error\n          ? <div style={errorMessageStyle}>Title is required*</div>\n          : null\n    const errorInputClass = error ? 'error': ''\n    return (\n        <div>\n            <input value={title}\n                   onChange={onChangeSetTitle}\n                   onKeyPress={onKeyPressSetTitle}\n                   className={errorInputClass}\n            />\n            <button onClick={onClickAddTask}>+</button>\n            {errorMessage}\n        </div>\n    );\n};\n\nexport default AddTaskForm;","import React , {ChangeEvent , useState} from 'react';\nimport './App.css';\n\ntype EditableSpanPropsType = {\n    oldTitle:string\n    nameOfClass: string\n    callBack : (updateTitle:string) => void\n}\nconst EditableSpan = (props:EditableSpanPropsType) => {\n    const [edit,setEdit] = useState(false)\n    const [newTitle,setNewTitle] = useState(props.oldTitle)\n    const doubleClickHandler = () => {\n      setEdit(true)\n    }\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\n      setNewTitle(e.currentTarget.value)\n    }\n    const onBlurHandler = () => {\n        props.callBack(newTitle)\n        setEdit(false)\n    }\n    return (\n        edit\n            ? <input value={newTitle} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler}/>\n        :<span onClick={doubleClickHandler} className={props.nameOfClass}>{props.oldTitle}</span>\n    );\n};\n\nexport default EditableSpan;","import React from 'react';\nimport AddTaskForm from \"./AddTaskForm\";\nimport {FilterValuesType} from \"./App\";\nimport EditableSpan from \"./EditableSpan\";\n\ntype TodoListHeaderPropsType = {\n    title:string\n    addTask: (todolistID:string,title:string) =>void\n    filter:FilterValuesType\n    todolistID:string\n    updateTodoListTitle:(todolistID:string,title:string)=>void\n    removeTodoList:(todoListID:string)=>void\n}\nconst TodoListHeader = (props:TodoListHeaderPropsType) => {\n    const updateTodoListTitleHandler = (title:string) => {\n        props.updateTodoListTitle(props.todolistID,title)\n    }\n    const removeTodoList = () => {\n      props.removeTodoList(props.todolistID)\n    }\n    const addTaskHandler = (title:string) => {\n        props.addTask(props.todolistID,title)\n    }\n    return (\n        <>\n            <h3>\n                <EditableSpan oldTitle={props.title} nameOfClass={'title'} callBack={updateTodoListTitleHandler}/>\n                <div className='headerFilter'>{props.filter}</div>\n                <button onClick={removeTodoList}>remove all todolist</button>\n            </h3>\n\n            <AddTaskForm\n                addTask = {addTaskHandler}\n            />\n        </>\n\n    );\n};\n\nexport default TodoListHeader;","import React , {ChangeEvent} from 'react';\nimport {TaskType} from \"./ToDoList\";\nimport EditableSpan from \"./EditableSpan\";\n\ntype TaskPropType = TaskType & {\n    removeTask: (todolistID:string,taskID:string)=> void\n    changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    todolistID:string\n    updateTask : (todolistID:string,taskID:string,updateTitle:string) => void\n}\n\nconst Task = (props: TaskPropType) => {\n    const completedClass = `task ${props.isDone ? 'completedTask' :''}`;\n    const removeTask = () => {\n        props.removeTask(props.todolistID,props.id)\n    }\n    const changeTaskStatus = (e:ChangeEvent<HTMLInputElement>) => {\n        props.changeTaskStatus(props.todolistID,props.id,e.currentTarget.checked)\n    }\n    const updateTaskHandler = (title:string) => {\n        props.updateTask(props.todolistID,props.id,title)\n    }\n    return (\n            <li >\n                <input type=\"checkbox\"\n                       onChange={changeTaskStatus}\n                       checked={props.isDone}\n                />\n                {/*<span className={completedClass}>{props.title}</span>*/}\n                <EditableSpan oldTitle = {props.title} nameOfClass = {completedClass} callBack = {(title)=>updateTaskHandler(title)}/>\n                <button onClick={removeTask}>x</button>\n            </li>\n\n    );\n};\n\nexport default Task;","import React from 'react';\nimport {FilterValuesType} from \"./App\";\n\ntype ControlButtonsType = {\n    filter:FilterValuesType\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    todolistID:string\n}\nconst ControlButtons = (props:ControlButtonsType) => {\n    const onCLickSetFilter = (todolistID:string,filter:FilterValuesType) => () => {\n        props.changeFilter(todolistID,filter)\n    }\n    return (\n        <div>\n            <button className={props.filter === 'all'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'all')}>All</button>\n            <button  className={props.filter === 'active'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'active')}>Active</button>\n            <button className={props.filter === 'completed'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</button>\n        </div>\n    );\n};\n\nexport default ControlButtons;","import React from 'react';\nimport Task from \"./Task\";\nimport {TaskType} from \"./ToDoList\";\nimport ControlButtons from \"./ControlButtons\";\nimport {FilterValuesType} from \"./App\";\n\ntype TasksListPropsType = {\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (todolistID:string,taskID:string)=> void\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    todolistID:string\n    updateTask:(todolistID:string,taskID:string,updateTitle:string) => void\n}\n\nconst TasksList = (props: TasksListPropsType) => {\n   const tasksComponentsList = props.tasks.map(task => {\n       return(\n        <Task\n            key={task.id}\n            {...task}  //пройтись мапом по всем компонентам с помощью спреад\n            removeTask={props.removeTask}\n            changeTaskStatus={props.changeTaskStatus}\n            todolistID = {props.todolistID}\n            updateTask = {props.updateTask}\n        />\n       )\n   })\n    const emptyMessage = <span style={{fontSize:'14px'}}>Task list is empty. Change filter or add task.</span>\n    const tasksList =  tasksComponentsList.length\n            ?\n            <ul>\n                {tasksComponentsList}\n            </ul>\n            : emptyMessage\n    return (\n        <>\n            {tasksList}\n            <ControlButtons\n                changeFilter={props.changeFilter}\n                filter={props.filter}\n                todolistID ={props.todolistID}\n            />\n        </>\n\n);\n};\n\nexport default TasksList;","import React from 'react';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TasksList from \"./TasksList\";\nimport {FilterValuesType} from \"./App\";\n\ntype ToDoListPropsType = {\n    todolistID:string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (todolistID:string,taskID:string)=> void\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    addTask: (todolistID:string,title:string) =>void\n    changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    removeTodoList:(todoListID:string)=>void\n    updateTask:(todolistID:string,taskID:string,updateTitle:string) => void\n    updateTodoListTitle:(todolistID:string,title:string)=>void\n}\nexport type TaskType ={\n    id: string\n    title: string\n    isDone: boolean\n\n}\n\nconst ToDoList = (props: ToDoListPropsType) => {\n  return(\n      <div className=\"App\">\n\n          <div>\n              <TodoListHeader title={props.title}\n                              addTask = {props.addTask}\n                              filter={props.filter}\n                              todolistID = {props.todolistID}\n                              updateTodoListTitle = {props.updateTodoListTitle}\n                              removeTodoList = {props.removeTodoList}\n              />\n              <TasksList\n                  tasks={props.tasks}\n                  removeTask={props.removeTask}\n                  changeFilter = {props.changeFilter}\n                  filter={props.filter}\n                  changeTaskStatus={props.changeTaskStatus}\n                  todolistID = {props.todolistID}\n                  updateTask = {props.updateTask}\n\n              />\n          </div>\n      </div>\n  )\n}\n\nexport  default ToDoList;","import React , {useState} from 'react';\r\nimport './App.css';\r\nimport ToDoList  from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddTaskForm from \"./AddTaskForm\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\ntype todolistsType = {\r\n    id:string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todolistID1=v1();\r\n    let todolistID2=v1();\r\n\r\n    let [todolists,setTodolists]=useState<Array<todolistsType>>([\r\n        {id:todolistID1,title:'What to learn',filter:'all'},\r\n        {id:todolistID2,title:'What to buy',filter:'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]:[\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]:[\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    // const [filter , setFilter] = useState<FilterValuesType>('all')\r\n\r\n    const changeFilter = (todolistID:string,value:FilterValuesType) => {\r\n        setTodolists(todolists.map((el)=> el.id ===todolistID ? {...el,filter:value} : el))\r\n        // берем объект идем мапом и если в нем у элемента айдишка равна айдишке\r\n        // из аргумента, то копируем остальной кусок объекта и даем туда новое\r\n        // значение фильта - вэлью(второй аргумент)\r\n    }\r\n\r\n    // const getFilteredTasksForRender = () => {\r\n    //     switch (filter) {\r\n    //         case \"completed\":\r\n    //             return tasks.filter(t => t.isDone === true)\r\n    //         case \"active\":\r\n    //             return tasks.filter(t => t.isDone === false)\r\n    //         default:\r\n    //             return tasks\r\n    //     }\r\n    // }\r\n    // let tasksForTodolist = tasks;\r\n    //\r\n    // if (filter === \"active\") {\r\n    //     tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n    // }\r\n    // if (filter === \"completed\") {\r\n    //     tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n    // }\r\n    // // const FilteredTasksForRender = getFilteredTasksForRender()\r\n\r\n    const removeTask = (todolistID:string,taskID: string) => {\r\n        setTasks({...tasks,[todolistID]:tasks[todolistID].filter(el=>el.id!==taskID)})\r\n        // const filteredTasks = tasks.filter(task => task.id !== taskID)\r\n        // setTasks(filteredTasks)\r\n        // console.log(tasks)\r\n    }\r\n\r\n    const addTask = (todolistID:string,title:string) => {\r\n        setTasks({...tasks,[todolistID]:[{id: v1(),title: title,isDone: false},...tasks[todolistID]]})\r\n        //    const newTask: TaskType = {id: v1(),title: title,isDone: false\r\n        // }\r\n        // const updatedTasks = [newTask,...tasks]\r\n        // setTasks([ {\r\n        //            id: v1(),\r\n        //            title,\r\n        //            isDone: false\r\n        //     },...tasks])\r\n    }\r\n    const changeTaskStatus = (todolistID:string,taskID: string, isDone:boolean) =>{\r\n        setTasks({...tasks,[todolistID]:tasks[todolistID].map(el=>el.id===taskID?{...el,isDone:isDone}:el)})\r\n    }\r\n\r\n    const removeTodoList = (todolistID:string) => {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(el => el.id !== todolistID));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[todolistID]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n    const updateTask = (todolistID:string,taskID:string,updateTitle:string) => {\r\n        // console.log(updateTitle)\r\n        setTasks({...tasks,[todolistID]:tasks[todolistID].map(el=>el.id===taskID?{...el,title:updateTitle}:el)})\r\n    }\r\n    const updateTodoListTitle = (todolistID:string,title:string) =>{\r\n        console.log(title)\r\n        setTodolists(todolists.map((el)=>el.id===todolistID?{...el,title:title}:el))\r\n    }\r\n    const addNewTask = (title:string) => {\r\n        let newID = v1()\r\n        setTodolists([{id: newID, title: title, filter: \"all\"},...todolists])\r\n        setTasks({...tasks,[newID]:[]})\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddTaskForm  addTask={addNewTask}/>\r\n            {todolists.map((el)=>{\r\n                let tasksForTodolist = tasks[el.id];\r\n\r\n                if (el.filter === \"active\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === false);\r\n                }\r\n                if (el.filter === \"completed\") {\r\n                    tasksForTodolist = tasks[el.id].filter(t => t.isDone === true);\r\n                }\r\n                return(\r\n                <ToDoList\r\n                    key = {el.id}\r\n                    todolistID = {el.id}\r\n                    title={ el.title}\r\n                    tasks={tasksForTodolist}\r\n                    removeTask={ removeTask }\r\n                    changeFilter={changeFilter}\r\n                    addTask = {addTask}\r\n                    filter={el.filter}\r\n                    changeTaskStatus={changeTaskStatus}\r\n                    updateTask = {updateTask}\r\n                    updateTodoListTitle = {updateTodoListTitle}\r\n                    removeTodoList = {removeTodoList}\r\n                />\r\n                )})}\r\n\r\n            {/*<ToDoList title={\"What to remember\"} tasks={task_2} />*/ }\r\n            {/*<ToDoList title={\"What to ask\"} tasks={task_3} />*/ }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}