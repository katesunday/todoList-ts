{"version":3,"sources":["api/todolist-api.ts","EditableSpan.tsx","AddItemForm.tsx","reducers/todolistsReducer.ts","reducers/tasksReducers.ts","TodoListHeader.tsx","Task.tsx","ControlButtons.tsx","TasksList.tsx","ToDoList.tsx","components/ButtonAppBar.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","EditableSpan","memo","props","useState","edit","setEdit","oldTitle","newTitle","setNewTitle","TextField","id","label","variant","value","onChange","e","currentTarget","autoFocus","onBlur","callBack","size","onClick","className","nameOfClass","AddItemForm","title","setTitle","error","setError","addItem","trim","errorMessage","style","color","fontSize","errorInputClass","onKeyPress","key","Button","sx","maxWidth","maxHeight","minWidth","minHeight","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","post","delete","todolistId","put","taskId","properties","initialState","addTodolistTC","dispatch","then","res","type","payload","newID","v1","addNewTodoListAC","TodoListHeader","useDispatch","updateTodoListTitleHandler","useCallback","todolistID","updateTodoListTitleAC","changeTodolistTitleTC","addTaskHandler","task","data","items","item","addTaskTC","IconButton","removeTodoList","Delete","filter","Task","completedClass","status","Completed","removeTask","taskID","removeTasksAC","updateTaskTitleHandler","getState","tasks","find","el","description","priority","startDate","deadline","updateTitle","updateTaskAC","changeTaskTitleTC","newIsDoneValue","checked","New","changeTaskStatusAC","ControlButtons","onCLickSetFilter","changeFilter","TasksList","filterReducerAC","tasksForTodolist","t","tasksComponentsList","map","emptyMessage","tasksList","length","ToDoList","useEffect","setTasksAC","removeTodoListAC","removeTodolistTC","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","App","todolists","useSelector","state","addTodoList","Container","fixed","Grid","container","padding","spacing","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","todolist","addedDate","order","todoListId","copyState","stateCopy","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.05d3624b.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/' ,\n    withCredentials: true ,\n    headers: {\n        'API-KEY': '1ec1e9c7-abf6-4bfd-8f4d-61f7bd79b19a'\n    }\n})\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: {\n        items: D\n    }\n}\nexport type GetTasksResponseType = {\n    error: null | string\n    totalCount: number\n    items:  TaskType[]\n}\n\nexport enum TaskStatuses{\n    New = 0,\n    InProgress,\n    Completed,\n    Draft\n}\nexport enum TaskPriorities{\n    Low ,\n    Middle,\n    Hi,\n    Urgently,\n    Later\n}\n\nexport type TaskType = {\n    id: string,\n    title: string,\n    description:  string,\n    todoListId: string,\n    order: number,\n    status: TaskStatuses,\n    priority: TaskPriorities,\n    startDate: string,\n    deadline: string,\n    addedDate: string\n\n}\nexport type PropertiesForUpdateTaskType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\n\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>(`todo-lists/`)\n    } ,\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/` , {title})\n    } ,\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/` + id)\n    } ,\n    updateTodolist(todolistId: string , title: string) {\n        return instance.put<ResponseType>(`todo-lists/` + todolistId ,\n            {title: title})\n    } ,\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/` + todolistId + `/tasks`)\n    } ,\n    createTask(todolistId: string , title: string) {\n        return instance.post<ResponseType<{item:TaskType}>>(`todo-lists/` + todolistId + `/tasks` , {title})\n    } ,\n    updateTask(todolistId: string , taskId: string  , properties: PropertiesForUpdateTaskType) {\n        return instance.put<ResponseType<{item:TaskType}>>(`todo-lists/` + todolistId + `/tasks/` + taskId , properties)\n    } ,\n    deleteTask(todolistId: string , taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/` + todolistId + `/tasks/` + taskId)\n    }\n\n\n}\n","import React , {ChangeEvent , memo , useState} from 'react';\nimport './App.css';\nimport {TextField} from \"@mui/material\";\n\nexport type EditableSpanPropsType = {\n    oldTitle:string\n    nameOfClass: string\n    callBack : (updateTitle:string) => void\n}\nconst EditableSpan = memo((props:EditableSpanPropsType) => {\n    const [edit,setEdit] = useState(false)\n    const [newTitle,setNewTitle] = useState(props.oldTitle)\n    const doubleClickHandler = () => {\n      setEdit(true)\n    }\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\n      setNewTitle(e.currentTarget.value)\n    }\n    const onBlurHandler = () => {\n        props.callBack(newTitle)\n        setEdit(false)\n    }\n    return (\n        edit\n            // ? <input value={newTitle} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler}/>\n            ? <TextField\n                id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\"\n                value={newTitle} onChange={onChangeHandler} autoFocus\n                onBlur={onBlurHandler}\n                size={\"small\"}\n            />\n        :<span onClick={doubleClickHandler} className={props.nameOfClass}>{props.oldTitle}</span>\n    );\n});\n\nexport default EditableSpan;","import React , {useState , KeyboardEvent , ChangeEvent , CSSProperties , memo} from 'react';\nimport {Button , TextField} from \"@mui/material\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\n    const [title , setTitle] = useState<string>('')\n    const [error , setError] = useState<string | boolean>(false)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            addItem()\n            setTitle('')\n        }\n    }\n    const errorMessageStyle: CSSProperties = {\n        color: 'red' ,\n        fontSize: '14px' ,\n    }\n\n    const errorMessage = error\n        ? <div style={errorMessageStyle}>Title is required*</div>\n        : null\n    const errorInputClass = error ? 'error' : ''\n    return (\n        <div>\n            <TextField id=\"outlined-basic\" label={errorInputClass} variant=\"outlined\"\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       className={errorInputClass}\n                       size={\"small\"}\n                       error={!!errorInputClass}\n                // helperText={error}\n            />\n            <Button onClick={addItem}\n                    variant=\"contained\"\n                    sx={{\n                        maxWidth: '40px' ,\n                        maxHeight: '40px' ,\n                        minWidth: '40px' ,\n                        minHeight: '40px' ,\n                    }}\n            >+</Button>\n            {/*<button onClick={onClickAddTask}>+</button>*/}\n            {errorMessage}\n        </div>\n    );\n});\n\nexport default AddItemForm;","import {todolistAPI , TodolistType} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {v1} from \"uuid\";\n\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n}\n\nconst initialState: Array<TodolistDomainType> = [\n    // {id: todolistID1 , title: 'What to learn' , filter: 'all',   addedDate: '',order: 0,} ,\n    // {id: todolistID2 , title: 'What to buy' , filter: 'all'} ,\n]\n\ntype todolistsReducerACType = filterReducerACType |\n    updateTodoListTitleACType | addNewTodoListACType |\n    removeTodoListACType | setTodolistsACType\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState , action: todolistsReducerACType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case \"ADD-NEW-TODOLIST\": {\n            let todolist: TodolistDomainType = {\n                id: action.payload.newID ,\n                title: action.payload.title ,\n                filter: 'all' ,\n                addedDate: '' ,\n                order: 0 ,\n            }\n            return [todolist , ...state]\n        }\n        case \"CHANGE-FILTER\": {\n            return state.map((el) => el.id === action.payload.todolistID ? {...el , filter: action.payload.value} : el)\n        }\n        case \"UPDATE-TODOLIST-TITLE\": {\n            return state.map((el) => el.id === action.payload.todolistID ? {...el , title: action.payload.title} : el)\n        }\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(el => el.id !== action.payload.todolistID)\n        }\n        case \"SET-TODOLISTS\":{\n            // добавить фильтр в каждый тудулист, так как это только для UI\n            return action.payload.todolists.map((el)=>({\n                ...el,filter:'all'\n            }))\n        }\n\n        default:\n            return state\n    }\n}\n\n\n\ntype filterReducerACType = ReturnType<typeof filterReducerAC>\nexport const filterReducerAC = (todolistID: string , value: FilterValuesType) => {\n    return {\n        type: 'CHANGE-FILTER' ,\n        payload: {todolistID , value}\n    } as const\n}\n\ntype updateTodoListTitleACType = ReturnType<typeof updateTodoListTitleAC>\nexport const updateTodoListTitleAC = (todolistID: string , title: string) => {\n    return {\n        type: \"UPDATE-TODOLIST-TITLE\" ,\n        payload: {todolistID , title}\n    } as const\n}\nexport type addNewTodoListACType = ReturnType<typeof addNewTodoListAC>\nexport const addNewTodoListAC = (title: string ) => {\n    const newID = v1()\n    return {\n        type: \"ADD-NEW-TODOLIST\" ,\n        payload: {title,newID }\n    } as const\n}\n\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\nexport const removeTodoListAC = (todolistID: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\" ,\n        payload: {todolistID}\n    } as const\n}\n\nexport type setTodolistsACType = ReturnType<typeof setTodolistsAC>\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\n    return {\n        type:'SET-TODOLISTS',\n        payload:{todolists}\n    }as const\n}\n\nexport const fetchTodolistsTC = ()=>{\n    return(dispatch:Dispatch)=>{\n        todolistAPI.getTodolists()\n            .then((res)=>{\n                dispatch(setTodolistsAC(res.data))\n            })\n    }\n}\n\nexport const addTodolistTC = (title:string)=>{\n    return(dispatch:Dispatch)=>{\n        todolistAPI.createTodolist(title)\n            .then((res)=>{\n                dispatch(addNewTodoListAC(title))\n            })\n    }\n}\nexport const removeTodolistTC = (todolistID:string)=>{\n    return(dispatch:Dispatch)=>{\n        todolistAPI.deleteTodolist(todolistID)\n            .then((res)=>{\n                dispatch(removeTodoListAC(todolistID))\n            })\n    }\n}\n\nexport const changeTodolistTitleTC = (todolistID:string,title:string)=>{\n    return(dispatch:Dispatch)=>{\n        todolistAPI.updateTodolist(todolistID,title)\n            .then((res)=>{\n                dispatch(updateTodoListTitleAC(todolistID,title))\n            })\n    }\n}\n\n\n\n//другой тип описание АС\n// export type RemoveTodolistActionType = {\n//     type: 'REMOVE-TODOLIST',\n//     id: string\n// }\n// export const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n//     return { type: 'REMOVE-TODOLIST', id: todolistId}\n// }","import {addNewTodoListACType , removeTodoListACType , setTodolistsACType} from \"./todolistsReducer\";\nimport { TaskStatuses , TaskType , todolistAPI} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../store/store\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nconst initialState: TasksStateType = {}\n\n\ntype tasksReducersAC = removeTasksACType | addTasksACType | changeTaskStatusACType |\n    updateTaskACType | removeTodoListACType | addNewTodoListACType | addNewTodolistACType\n    | setTodolistsACType | ReturnType<typeof setTasksAC>\n\nexport const tasksReducers = (state: TasksStateType = initialState , action: tasksReducersAC): TasksStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASKS\": {\n            return {...state , [action.todolistID]: state[action.todolistID].filter(el => el.id !== action.taskID)}\n        }\n        case \"ADD-TASKS\": {\n            // const stateCopy = {...state}\n            // const tasks = stateCopy[action.task.todoListId]\n            // const newTasks = [action.task,...tasks]\n            // stateCopy[action.task.todoListId] = newTasks\n            return {\n                ...state ,\n                [action.payload.task.todoListId]: [action.payload.task , ...state[action.payload.task.todoListId]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\": {\n            return {\n                ...state , [action.payload.todolistID]:\n                    state[action.payload.todolistID].map(el => el.id === action.payload.taskID ?\n                        {...el , status: action.payload.status} : el)\n            }\n        }\n        case \"UPDATE-TASK\": {\n            return {\n                ...state ,\n                [action.payload.todolistID]: state[action.payload.todolistID].map(el => el.id === action.payload.taskID ?\n                    {...el , title: action.payload.updateTitle} : el)\n            }\n        }\n        case \"ADD-NEW-TODOLIST\": {\n            return {...state , [action.payload.newID]: []}\n        }\n        case \"REMOVE-TODOLIST\": {\n            let copyState = {...state}\n            delete copyState[action.payload.todolistID]\n            return copyState\n        }\n        case \"SET-TODOLISTS\": {\n            // добавить в каждому тудулисту массив пустых тасок\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((el) => {\n                stateCopy[el.id] = []\n            })\n            return stateCopy\n        }\n        case \"SET-TASKS\": {\n            const stateCopy = {...state}\n            stateCopy[action.payload.todolistID] = action.payload.tasks\n            return stateCopy\n        }\n\n        default:\n            return state\n    }\n\n}\n\n\ntype removeTasksACType = ReturnType<typeof removeTasksAC>\nexport const removeTasksAC = (todolistID: string , taskID: string) => {\n    return {\n        type: \"REMOVE-TASKS\" ,\n        todolistID: todolistID ,\n        taskID: taskID\n    } as const\n}\n\ntype addTasksACType = ReturnType<typeof addTasksAC>\nexport const addTasksAC = (task:TaskType) => {\n    return {\n        type: \"ADD-TASKS\" ,\n        payload: {task}\n    } as const\n}\n\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\nexport const changeTaskStatusAC = (todolistID: string , taskID: string , status: TaskStatuses) => {\n    return {\n        type: \"CHANGE-TASK-STATUS\" ,\n        payload: {todolistID , taskID , status}\n    } as const\n}\n\ntype updateTaskACType = ReturnType<typeof updateTaskAC>\nexport const updateTaskAC = (todolistID: string , taskID: string , updateTitle: string) => {\n    return {\n        type: \"UPDATE-TASK\" ,\n        payload: {todolistID , taskID , updateTitle}\n    } as const\n}\n\ntype addNewTodolistACType = ReturnType<typeof addNewTodolistAC>\nexport const addNewTodolistAC = (newID: string) => {\n    return {\n        type: \"ADD-NEW-TODOLIST\" ,\n        payload: {newID}\n    } as const\n}\n\nexport const setTasksAC = (tasks: TaskType[] , todolistID: string) => {\n    return {\n        type: 'SET-TASKS' ,\n        payload: {tasks , todolistID}\n    } as const\n}\n\nexport const fetchTasksTC = (todolistID: string) => {\n    return (dispatch: Dispatch) => {\n        todolistAPI.getTasks(todolistID)\n            .then((res) => {\n                dispatch(setTasksAC(res.data.items , todolistID))\n            })\n    }\n}\n\nexport const addTaskTC = (todolistID:string,title:string)=>{\n    return(dispatch: Dispatch)=>{\n        todolistAPI.createTask(todolistID,title)\n            .then((res)=>{\n                dispatch(addTasksAC(res.data.data.items.item))\n            })\n    }\n}\n\nexport const removeTaskTC = (todolistID:string,taskId:string)=>{\n    return(dispatch: Dispatch)=>{\n        todolistAPI.deleteTask(todolistID,taskId)\n            .then((res)=>{\n                dispatch(removeTasksAC(todolistID,taskId))\n            })\n    }\n}\n\nexport const changeTaskStatusTC = (todolistID:string,taskId:string,status:TaskStatuses)=>{\n    return (dispatch: Dispatch,getState: () => AppRootStateType)=>{\n     const allTasksFromState = getState().tasks\n        const tasksForCurrentTodolist = allTasksFromState[todolistID]\n        const task = tasksForCurrentTodolist.find((el)=>{\n            return el.id === taskId\n        })\n        if(task){\n            todolistAPI.updateTask(todolistID,taskId,{\n                title: task.title,\n                description: task.description,\n                status: status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline\n            })\n                .then((res)=>{\n                    dispatch(changeTaskStatusAC(todolistID,taskId,status))\n                })\n        }\n    }\n}\n\nexport const changeTaskTitleTC = (todolistID:string,taskId:string,title:string)=>{\n    return(dispatch: Dispatch,getState: () => AppRootStateType)=>{\n        const allTasksFromState = getState().tasks\n        const tasksForCurrentTodolist = allTasksFromState[todolistID]\n        const task = tasksForCurrentTodolist.find((el)=>{\n            return el.id === taskId\n        })\n        if(task){\n            todolistAPI.updateTask(todolistID,taskId,{\n                title: title,\n                description: task.description,\n                status: task.status,\n                priority: task.priority,\n                startDate: task.startDate,\n                deadline: task.deadline\n            })\n                .then((res)=>{\n                    dispatch(updateTaskAC(todolistID,taskId,title))\n                })\n        }\n    }\n}\n\n\n\n","import React , {memo , useCallback} from 'react';\nimport EditableSpan from \"./EditableSpan\";\nimport AddItemForm from \"./AddItemForm\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {changeTodolistTitleTC , FilterValuesType } from \"./reducers/todolistsReducer\";\nimport {useDispatch} from \"react-redux\";\nimport { addTaskTC} from \"./reducers/tasksReducers\";\n\ntype TodoListHeaderPropsType = {\n    title: string\n    filter: FilterValuesType\n    todolistID: string\n    removeTodoList: (todoListID: string) => void\n}\nconst TodoListHeader = memo((props: TodoListHeaderPropsType) => {\n    const dispatch = useDispatch()\n\n    const updateTodoListTitleHandler = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC(props.todolistID , title))\n    } , [props.todolistID , dispatch])\n\n    const removeTodoList = () => {\n        props.removeTodoList(props.todolistID)\n    }\n    const addTaskHandler = useCallback((title: string) => {\n       dispatch(addTaskTC(props.todolistID,title))\n    } , [props.todolistID , dispatch])\n\n    return (\n        <>\n            <h3>\n                <EditableSpan oldTitle={props.title}\n                              nameOfClass={'title'}\n                              callBack={updateTodoListTitleHandler}\n                />\n\n                <IconButton aria-label=\"delete\" onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n                <div className='headerFilter'>{props.filter}</div>\n            </h3>\n\n            <AddItemForm addItem={addTaskHandler}\n            />\n        </>\n\n    );\n});\n\nexport default TodoListHeader;","import React , {ChangeEvent , memo , useCallback} from 'react';\nimport EditableSpan from \"./EditableSpan\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {changeTaskStatusTC , changeTaskTitleTC , removeTaskTC ,} from \"./reducers/tasksReducers\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskStatuses , TaskType} from \"./api/todolist-api\";\n\nexport type TaskPropType = TaskType & {\n    todolistID: string\n}\n\nconst Task = memo((props: TaskPropType) => {\n    const dispatch = useDispatch()\n    const completedClass = `task ${props.status === TaskStatuses.Completed ? 'completedTask' : ''}`;\n\n    const removeTask = useCallback(() => {\n        dispatch(removeTaskTC(props.todolistID , props.id))\n    } , [dispatch , props.todolistID , props.id])\n\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        const newIsDoneValue = e.currentTarget.checked\n        dispatch(changeTaskStatusTC(props.todolistID , props.id ,\n            newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New))\n    }\n    const updateTaskTitleHandler = useCallback((title: string) => {\n        dispatch(changeTaskTitleTC(props.todolistID , props.id , title))\n    } , [props , dispatch])\n    return (\n        <li>\n            <input type=\"checkbox\"\n                   onChange={changeTaskStatus}\n                   checked={props.status === TaskStatuses.Completed}\n            />\n            <EditableSpan oldTitle={props.title} nameOfClass={completedClass}\n                          callBack={useCallback((title) => updateTaskTitleHandler(title) ,\n                              [updateTaskTitleHandler])}/>\n            <IconButton aria-label=\"delete\" onClick={removeTask}>\n                <Delete/>\n            </IconButton>\n        </li>\n\n    );\n});\n\nexport default Task;","import React , {memo} from 'react';\nimport {Button} from \"@mui/material\";\nimport {FilterValuesType} from \"./reducers/todolistsReducer\";\n\n\ntype ControlButtonsType = {\n    filter:FilterValuesType\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    todolistID:string\n}\nconst ControlButtons = memo((props:ControlButtonsType) => {\n    const onCLickSetFilter = (todolistID:string,filter:FilterValuesType) => () => {\n        props.changeFilter(todolistID,filter)\n    }\n    return (\n        <div>\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"contained\"} color=\"secondary\" onClick={onCLickSetFilter(props.todolistID,'all')}>All</Button>\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"contained\"}  color=\"success\" onClick={onCLickSetFilter(props.todolistID,'active')}>Active</Button>\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"contained\"}  color=\"error\" onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</Button>\n            {/*<button className={props.filter === 'all'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'all')}>All</button>*/}\n            {/*<button  className={props.filter === 'active'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'active')}>Active</button>*/}\n            {/*<button className={props.filter === 'completed'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</button>*/}\n        </div>\n    );\n});\n\nexport default ControlButtons;","import React , {memo , useCallback} from 'react';\nimport Task from \"./Task\";\nimport ControlButtons from \"./ControlButtons\";\nimport {useDispatch} from \"react-redux\";\nimport {filterReducerAC , FilterValuesType} from \"./reducers/todolistsReducer\";\nimport {TaskStatuses , TaskType} from \"./api/todolist-api\";\n\ntype TasksListPropsType = {\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    todolistID:string\n}\n\nconst TasksList = memo((props: TasksListPropsType) => {\n    const dispatch = useDispatch()\n\n    const changeFilter = useCallback((todolistID: string , value: FilterValuesType) => {\n        dispatch(filterReducerAC(todolistID , value))\n    },[dispatch])\n\n    let tasksForTodolist = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\n    } else if (props.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\n    }\n\n   const tasksComponentsList = tasksForTodolist.map(task => {\n       return(\n        <Task\n            key={task.id}\n            {...task}  //пройтись мапом по всем компонентам с помощью спреад\n            todolistID = {props.todolistID}\n        />\n       )\n   })\n    const emptyMessage = <span style={{fontSize:'14px'}}>Task list is empty. Change filter or add task.</span>\n    const tasksList =  tasksComponentsList.length\n            ?\n            <ul>\n                {tasksComponentsList}\n            </ul>\n            : emptyMessage\n    return (\n        <>\n            {tasksList}\n            <ControlButtons\n                changeFilter={changeFilter}\n                filter={props.filter}\n                todolistID ={props.todolistID}\n            />\n        </>\n\n);\n});\n\nexport default TasksList;","import React , {memo , useCallback , useEffect} from 'react';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TasksList from \"./TasksList\";\nimport {useDispatch} from \"react-redux\";\nimport {FilterValuesType  , removeTodolistTC} from \"./reducers/todolistsReducer\";\nimport {TaskType} from \"./api/todolist-api\";\nimport {fetchTasksTC} from \"./reducers/tasksReducers\";\n\ntype ToDoListPropsType = {\n    todolistID: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n}\n\n\nconst ToDoList = memo((props: ToDoListPropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect(()=>{\n        dispatch(fetchTasksTC(props.todolistID))\n    },[])\n\n    const removeTodoList = useCallback((todolistID: string) => {\n        dispatch(removeTodolistTC(todolistID))\n    } , [dispatch ])\n\n\n\n    return (\n        <div className=\"App\">\n\n            <div>\n                <TodoListHeader title={props.title}\n                                filter={props.filter}\n                                todolistID={props.todolistID}\n                                removeTodoList={removeTodoList}\n                />\n                <TasksList\n                    tasks={props.tasks}\n                    filter={props.filter}\n                    todolistID={props.todolistID}\n                />\n            </div>\n        </div>\n    )\n})\n\nexport default ToDoList;","import * as React from 'react';\nimport {AppBar , Box , Button , IconButton  , Toolbar , Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\n\n\nexport default function ButtonAppBar() {\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                    >\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}","import React , {useCallback , useEffect} from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport { addTodolistTC , fetchTodolistsTC , TodolistDomainType} from \"./reducers/todolistsReducer\";\r\nimport {TasksStateType} from \"./reducers/tasksReducers\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\nimport {useDispatch , useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {Container , Grid , Paper} from \"@mui/material\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType , Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType , TasksStateType>(state => state.tasks)\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    } , [])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    } , [dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map((el) => {\r\n                        let tasksForTodolist = tasks[el.id];\r\n                        return (\r\n                            <Grid key={el.id} item>\r\n                                <Paper key={el.id} elevation={6} style={{padding: '10px'}}>\r\n                                    <ToDoList\r\n                                        key={el.id}\r\n                                        todolistID={el.id}\r\n                                        title={el.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        filter={el.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware , combineReducers , createStore} from \"redux\";\nimport {todolistsReducer} from \"../reducers/todolistsReducer\";\nimport {tasksReducers} from \"../reducers/tasksReducers\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks:tasksReducers,\n})\n export type AppRootStateType = ReturnType<typeof rootReducer>\nexport const store = createStore(rootReducer,applyMiddleware(thunk))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /> </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}