{"version":3,"sources":["EditableSpan.tsx","AddItemForm.tsx","TodoListHeader.tsx","Task.tsx","ControlButtons.tsx","TasksList.tsx","ToDoList.tsx","reducers/todolistsReducer.ts","reducers/tasksReducers.ts","components/ButtonAppBar.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["EditableSpan","memo","props","useState","edit","setEdit","oldTitle","newTitle","setNewTitle","TextField","id","label","variant","value","onChange","e","currentTarget","autoFocus","onBlur","callBack","size","onClick","className","nameOfClass","AddItemForm","title","setTitle","error","setError","addItem","trim","errorMessage","style","color","fontSize","errorInputClass","onKeyPress","key","Button","sx","maxWidth","maxHeight","minWidth","minHeight","TodoListHeader","updateTodoListTitleHandler","useCallback","updateTodoListTitle","todolistID","addTaskHandler","addTask","IconButton","removeTodoList","Delete","filter","Task","completedClass","isDone","updateTaskHandler","updateTask","type","changeTaskStatus","checked","removeTask","ControlButtons","onCLickSetFilter","changeFilter","TasksList","tasksComponentsList","tasks","map","task","emptyMessage","tasksList","length","ToDoList","console","log","t","initialState","removeTodoListAC","payload","v1","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","App","dispatch","useDispatch","todolists","useSelector","state","filterReducerAC","taskID","removeTasksAC","newID","addTasksAC","changeTaskStatusAC","updateTitle","updateTaskAC","updateTodoListTitleAC","addTodoList","addNewTodoListAC","Container","fixed","Grid","container","padding","spacing","el","tasksForTodolist","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","todolist","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7ac70a01.chunk.js","sourcesContent":["import React , {ChangeEvent , memo , useState} from 'react';\nimport './App.css';\nimport {TextField} from \"@mui/material\";\n\nexport type EditableSpanPropsType = {\n    oldTitle:string\n    nameOfClass: string\n    callBack : (updateTitle:string) => void\n}\nconst EditableSpan = memo((props:EditableSpanPropsType) => {\n    const [edit,setEdit] = useState(false)\n    const [newTitle,setNewTitle] = useState(props.oldTitle)\n    const doubleClickHandler = () => {\n      setEdit(true)\n    }\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\n      setNewTitle(e.currentTarget.value)\n    }\n    const onBlurHandler = () => {\n        props.callBack(newTitle)\n        setEdit(false)\n    }\n    return (\n        edit\n            // ? <input value={newTitle} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler}/>\n            ? <TextField\n                id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\"\n                value={newTitle} onChange={onChangeHandler} autoFocus\n                onBlur={onBlurHandler}\n                size={\"small\"}\n            />\n        :<span onClick={doubleClickHandler} className={props.nameOfClass}>{props.oldTitle}</span>\n    );\n});\n\nexport default EditableSpan;","import React , {useState , KeyboardEvent , ChangeEvent , CSSProperties , memo} from 'react';\nimport {Button , TextField} from \"@mui/material\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\n    const [title , setTitle] = useState<string>('')\n    const [error , setError] = useState<string | boolean>(false)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            addItem()\n            setTitle('')\n        }\n    }\n    const errorMessageStyle: CSSProperties = {\n        color: 'red' ,\n        fontSize: '14px' ,\n    }\n\n    const errorMessage = error\n        ? <div style={errorMessageStyle}>Title is required*</div>\n        : null\n    const errorInputClass = error ? 'error' : ''\n    return (\n        <div>\n            <TextField id=\"outlined-basic\" label={errorInputClass} variant=\"outlined\"\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       className={errorInputClass}\n                       size={\"small\"}\n                       error={!!errorInputClass}\n                // helperText={error}\n            />\n            <Button onClick={addItem}\n                    variant=\"contained\"\n                    sx={{\n                        maxWidth: '40px' ,\n                        maxHeight: '40px' ,\n                        minWidth: '40px' ,\n                        minHeight: '40px' ,\n                    }}\n            >+</Button>\n            {/*<button onClick={onClickAddTask}>+</button>*/}\n            {errorMessage}\n        </div>\n    );\n});\n\nexport default AddItemForm;","import React , {useCallback} from 'react';\nimport {FilterValuesType} from \"./App\";\nimport EditableSpan from \"./EditableSpan\";\nimport AddItemForm from \"./AddItemForm\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\ntype TodoListHeaderPropsType = {\n    title:string\n    addTask: (todolistID:string,title:string) =>void\n    filter:FilterValuesType\n    todolistID:string\n    updateTodoListTitle:(todolistID:string,title:string)=>void\n    removeTodoList:(todoListID:string)=>void\n}\nconst TodoListHeader = (props:TodoListHeaderPropsType) => {\n    const updateTodoListTitleHandler = useCallback( (title:string) => {\n        props.updateTodoListTitle(props.todolistID,title)\n    },[props.updateTodoListTitle,props.todolistID])\n\n    const removeTodoList = () => {\n      props.removeTodoList(props.todolistID)\n    }\n    const addTaskHandler =useCallback( (title:string) => {\n        props.addTask(props.todolistID,title)\n    },[props.addTask,props.todolistID])\n    return (\n        <>\n            <h3>\n                <EditableSpan oldTitle={props.title} nameOfClass={'title'} callBack={updateTodoListTitleHandler}\n\n                />\n\n                {/*<button onClick={removeTodoList}>remove all todolist</button>*/}\n                <IconButton aria-label=\"delete\" onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n                <div className='headerFilter'>{props.filter}</div>\n            </h3>\n\n            <AddItemForm addItem={addTaskHandler}\n            />\n        </>\n\n    );\n};\n\nexport default TodoListHeader;","import React , {ChangeEvent , useCallback} from 'react';\nimport {TaskType} from \"./ToDoList\";\nimport EditableSpan from \"./EditableSpan\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\nexport type TaskPropType = TaskType & {\n    removeTask: (todolistID:string,taskID:string)=> void\n    changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    todolistID:string\n    updateTask : (todolistID:string,taskID:string,updateTitle:string) => void\n}\n\nconst Task = (props: TaskPropType) => {\n    const completedClass = `task ${props.isDone ? 'completedTask' :''}`;\n    const removeTask = () => {\n        props.removeTask(props.todolistID,props.id)\n    }\n    const changeTaskStatus = (e:ChangeEvent<HTMLInputElement>) => {\n        props.changeTaskStatus(props.todolistID,props.id,e.currentTarget.checked)\n    }\n    const updateTaskHandler = useCallback((title:string) => {\n        props.updateTask(props.todolistID,props.id,title)\n    },[props])\n    return (\n            <li >\n                <input type=\"checkbox\"\n                       onChange={changeTaskStatus}\n                       checked={props.isDone}\n                />\n                <EditableSpan oldTitle = {props.title} nameOfClass = {completedClass}\n                              callBack = {useCallback((title)=>updateTaskHandler(title),[updateTaskHandler])}/>\n                <IconButton aria-label=\"delete\" onClick={removeTask}>\n                    <Delete />\n                </IconButton>\n            </li>\n\n    );\n};\n\nexport default Task;","import React from 'react';\nimport {FilterValuesType} from \"./App\";\nimport {Button} from \"@mui/material\";\n\n\ntype ControlButtonsType = {\n    filter:FilterValuesType\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    todolistID:string\n}\nconst ControlButtons = (props:ControlButtonsType) => {\n    const onCLickSetFilter = (todolistID:string,filter:FilterValuesType) => () => {\n        props.changeFilter(todolistID,filter)\n    }\n    return (\n        <div>\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"contained\"} color=\"secondary\" onClick={onCLickSetFilter(props.todolistID,'all')}>All</Button>\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"contained\"}  color=\"success\" onClick={onCLickSetFilter(props.todolistID,'active')}>Active</Button>\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"contained\"}  color=\"error\" onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</Button>\n            {/*<button className={props.filter === 'all'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'all')}>All</button>*/}\n            {/*<button  className={props.filter === 'active'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'active')}>Active</button>*/}\n            {/*<button className={props.filter === 'completed'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</button>*/}\n        </div>\n    );\n};\n\nexport default ControlButtons;","import React from 'react';\nimport Task from \"./Task\";\nimport {TaskType} from \"./ToDoList\";\nimport ControlButtons from \"./ControlButtons\";\nimport {FilterValuesType} from \"./App\";\n\ntype TasksListPropsType = {\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (todolistID:string,taskID:string)=> void\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    todolistID:string\n    updateTask:(todolistID:string,taskID:string,updateTitle:string) => void\n}\n\nconst TasksList = (props: TasksListPropsType) => {\n   const tasksComponentsList = props.tasks.map(task => {\n       return(\n        <Task\n            key={task.id}\n            {...task}  //пройтись мапом по всем компонентам с помощью спреад\n            removeTask={props.removeTask}\n            changeTaskStatus={props.changeTaskStatus}\n            todolistID = {props.todolistID}\n            updateTask = {props.updateTask}\n        />\n       )\n   })\n    const emptyMessage = <span style={{fontSize:'14px'}}>Task list is empty. Change filter or add task.</span>\n    const tasksList =  tasksComponentsList.length\n            ?\n            <ul>\n                {tasksComponentsList}\n            </ul>\n            : emptyMessage\n    return (\n        <>\n            {tasksList}\n            <ControlButtons\n                changeFilter={props.changeFilter}\n                filter={props.filter}\n                todolistID ={props.todolistID}\n            />\n        </>\n\n);\n};\n\nexport default TasksList;","import React , {memo} from 'react';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TasksList from \"./TasksList\";\nimport {FilterValuesType} from \"./App\";\n\ntype ToDoListPropsType = {\n    todolistID:string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    removeTask: (todolistID:string,taskID:string)=> void\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    addTask: (todolistID:string,title:string) =>void\n    changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    removeTodoList:(todoListID:string)=>void\n    updateTask:(todolistID:string,taskID:string,updateTitle:string) => void\n    updateTodoListTitle:(todolistID:string,title:string)=>void\n}\nexport type TaskType ={\n    id: string\n    title: string\n    isDone: boolean\n\n}\n\nconst ToDoList = memo((props: ToDoListPropsType) => {\n    console.log(props.tasks,props.filter)\n    let tasksForTodolist = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\n    }\n    if (props.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\n    }\n  return(\n      <div className=\"App\">\n\n          <div>\n              <TodoListHeader title={props.title}\n                              addTask = {props.addTask}\n                              filter={props.filter}\n                              todolistID = {props.todolistID}\n                              updateTodoListTitle = {props.updateTodoListTitle}\n                              removeTodoList = {props.removeTodoList}\n              />\n              <TasksList\n                  tasks={props.tasks}\n                  removeTask={props.removeTask}\n                  changeFilter = {props.changeFilter}\n                  filter={props.filter}\n                  changeTaskStatus={props.changeTaskStatus}\n                  todolistID = {props.todolistID}\n                  updateTask = {props.updateTask}\n\n              />\n          </div>\n      </div>\n  )\n})\n\nexport  default ToDoList;","import {FilterValuesType , TodolistsType} from \"../App\";\n\nconst initialState: Array<TodolistsType> = [\n    // {id: todolistID1 , title: 'What to learn' , filter: 'all'} ,\n    // {id: todolistID2 , title: 'What to buy' , filter: 'all'} ,\n]\nexport const todolistsReducer = (state: Array<TodolistsType> = initialState , action: todolistsReducerACType): Array<TodolistsType> => {\n    switch (action.type) {\n        case \"ADD-NEW-TODOLIST\": {\n            let todolist: TodolistsType = {id: action.payload.newID , title: action.payload.title , filter: 'all'}\n            return [todolist , ...state]\n        }\n        case \"CHANGE-FILTER\": {\n            return state.map((el) => el.id === action.payload.todolistID ? {...el , filter: action.payload.value} : el)\n        }\n        case \"UPDATE-TODOLIST-TITLE\": {\n            return state.map((el) => el.id === action.payload.todolistID ? {...el , title: action.payload.title} : el)\n        }\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(el => el.id !== action.payload.todolistID)\n        }\n\n        default:\n            return state\n    }\n}\n\ntype todolistsReducerACType = filterReducerACType | updateTodoListTitleACType | addNewTodoListACType | removeTodoListACType\ntype filterReducerACType = ReturnType<typeof filterReducerAC>\nexport const filterReducerAC = (todolistID: string , value: FilterValuesType) => {\n    return {\n        type: 'CHANGE-FILTER' ,\n        payload: {todolistID , value}\n    } as const\n}\n\ntype updateTodoListTitleACType = ReturnType<typeof updateTodoListTitleAC>\nexport const updateTodoListTitleAC = (todolistID: string , title: string) => {\n    return {\n        type: \"UPDATE-TODOLIST-TITLE\" ,\n        payload: {todolistID , title}\n    } as const\n}\nexport type addNewTodoListACType = ReturnType<typeof addNewTodoListAC>\nexport const addNewTodoListAC = (title: string , newID: string) => {\n    return {\n        type: \"ADD-NEW-TODOLIST\" ,\n        payload: {title , newID}\n    } as const\n}\n\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\nexport const removeTodoListAC = (todolistID: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\" ,\n        payload: {todolistID}\n    } as const\n}\n\n//другой тип описание АС\n// export type RemoveTodolistActionType = {\n//     type: 'REMOVE-TODOLIST',\n//     id: string\n// }\n// export const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n//     return { type: 'REMOVE-TODOLIST', id: todolistId}\n// }","import {TaskType} from \"../ToDoList\";\nimport {addNewTodoListACType , removeTodoListACType} from \"./todolistsReducer\";\nimport {v1} from \"uuid\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport let todolistID1 = v1();\nexport let todolistID2 = v1();\nconst initialState:TasksStateType = {\n        // [todolistID1]: [\n        //     {id: v1() , title: \"HTML&CSS\" , isDone: true} ,\n        //     {id: v1() , title: \"JS\" , isDone: true} ,\n        //     {id: v1() , title: \"ReactJS\" , isDone: false} ,\n        //     {id: v1() , title: \"Rest API\" , isDone: false} ,\n        //     {id: v1() , title: \"GraphQL\" , isDone: false} ,\n        // ] ,\n        // [todolistID2]: [\n        //     {id: v1() , title: \"Milk\" , isDone: true} ,\n        //     {id: v1() , title: \"Juice\" , isDone: true} ,\n        //     {id: v1() , title: \"blabla\" , isDone: false} ,\n        //     {id: v1() , title: \"smth else\" , isDone: false} ,\n        //     {id: v1() , title: \"bananas\" , isDone: false} ,\n        // ]\n    }\n\nexport const tasksReducers = (state:TasksStateType = initialState,action:tasksReducersAC): TasksStateType =>{\n    switch (action.type){\n        case \"REMOVE-TASKS\":{\n          return  {...state,[action.todolistID]:state[action.todolistID].filter(el=>el.id!==action.taskID)}\n        }\n        case \"ADD-TASKS\":{\n            let task = {id: action.payload.newID, title: action.payload.title, isDone:false}\n            return {\n                ...state,\n                [action.payload.todolistID]: [task,...state[action.payload.todolistID]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\":{\n            return {...state,[action.payload.todolistID]:\n                    state[action.payload.todolistID].map(el=>el.id===action.payload.taskID?\n                        {...el,isDone:action.payload.isDone}:el)}\n        }\n        case \"UPDATE-TASK\":{\n            return {...state,[action.payload.todolistID]:state[action.payload.todolistID].map(el=>el.id===action.payload.taskID?\n                    {...el,title:action.payload.updateTitle}:el)}\n        }\n        case \"ADD-NEW-TODOLIST\": {\n            return {...state,[action.payload.newID]:[]}\n        }\n        case \"REMOVE-TODOLIST\":{\n            let copyState = {...state}\n            delete copyState[action.payload.todolistID]\n            return copyState\n        }\n        default: return state\n    }\n\n}\n\ntype tasksReducersAC = removeTasksACType | addTasksACType | changeTaskStatusACType |\n    updateTaskACType | removeTodoListACType | addNewTodoListACType |addNewTodolistACType\n\ntype removeTasksACType =  ReturnType<typeof removeTasksAC>\nexport const removeTasksAC = (todolistID:string,taskID: string)=>{\n    return{\n        type: \"REMOVE-TASKS\",\n        todolistID:todolistID,\n        taskID:taskID\n    } as const\n}\n\ntype addTasksACType = ReturnType<typeof addTasksAC>\nexport const addTasksAC = (todolistID:string,title:string,newID:string)=>{\n    return{\n        type: \"ADD-TASKS\",\n        payload:{todolistID,title,newID}\n    }as const\n}\n\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\nexport const changeTaskStatusAC = (todolistID:string,taskID: string, isDone:boolean)=>{\n    return{\n        type: \"CHANGE-TASK-STATUS\",\n        payload:{todolistID,taskID,isDone}\n    }as const\n}\n\ntype updateTaskACType = ReturnType<typeof updateTaskAC>\nexport const updateTaskAC = (todolistID:string,taskID: string, updateTitle:string)=>{\n    return{\n        type: \"UPDATE-TASK\",\n        payload:{todolistID,taskID,updateTitle}\n    }as const\n}\n\n type addNewTodolistACType = ReturnType<typeof updateNewTodolistAC>\n export const updateNewTodolistAC = (newID:string)=>{\n    return{\n        type:\"ADD-NEW-TODOLIST\",\n        payload: {newID}\n    } as const\n}\n\n","import * as React from 'react';\nimport {AppBar , Box , Button , IconButton  , Toolbar , Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\n\n\nexport default function ButtonAppBar() {\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                    >\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}","import React , {useCallback} from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {\r\n    filterReducerAC ,\r\n    updateTodoListTitleAC ,\r\n    removeTodoListAC ,\r\n    addNewTodoListAC\r\n} from \"./reducers/todolistsReducer\";\r\nimport {\r\n    addTasksAC ,\r\n    changeTaskStatusAC ,\r\n    removeTasksAC ,\r\n    updateTaskAC ,TasksStateType\r\n} from \"./reducers/tasksReducers\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\nimport {useDispatch , useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {Container , Grid , Paper} from \"@mui/material\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType,Array<TodolistsType>>(state=>state.todolists)\r\n    const tasks = useSelector<AppRootStateType,TasksStateType>(state=>state.tasks)\r\n\r\n\r\n    const changeFilter = useCallback((todolistID: string , value: FilterValuesType) => {\r\n        dispatch(filterReducerAC(todolistID , value))\r\n    },[dispatch])\r\n\r\n    const removeTask = useCallback((todolistID: string , taskID: string) => {\r\n        dispatch(removeTasksAC(todolistID , taskID))\r\n\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((todolistID: string , title: string) => {\r\n        let newID = v1()\r\n        dispatch(addTasksAC(todolistID , title , newID))\r\n\r\n    },[dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistID: string , taskID: string , isDone: boolean) => {\r\n        dispatch(changeTaskStatusAC(todolistID , taskID , isDone))\r\n    },[dispatch])\r\n\r\n    const removeTodoList = useCallback((todolistID: string) => {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        dispatch(removeTodoListAC(todolistID))\r\n        // setTodolists(todolists.filter(el => el.id !== todolistID));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[todolistID]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        dispatch(removeTodoListAC(todolistID))\r\n        //setTasks({...tasks});\r\n    },[dispatch,tasks])\r\n\r\n    const updateTask = useCallback((todolistID: string , taskID: string , updateTitle: string) => {\r\n        dispatch(updateTaskAC(todolistID , taskID , updateTitle))\r\n    },[dispatch])\r\n\r\n    const updateTodoListTitle = useCallback((todolistID: string , title: string) => {\r\n        dispatch(updateTodoListTitleAC(todolistID , title))\r\n    },[dispatch])\r\n\r\n    const addTodoList = useCallback( (title: string) => {\r\n        let newID = v1()\r\n        dispatch(addNewTodoListAC(title,newID))\r\n\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map((el) => {\r\n                        let tasksForTodolist = tasks[el.id];\r\n                        return (\r\n                            <Grid key={el.id} item>\r\n                                <Paper key={el.id} elevation={6} style={{padding: '10px'}}>\r\n                                    <ToDoList\r\n                                        key={el.id}\r\n                                        todolistID={el.id}\r\n                                        title={el.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        filter={el.filter}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        updateTask={updateTask}\r\n                                        updateTodoListTitle={updateTodoListTitle}\r\n                                        removeTodoList={removeTodoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers , createStore} from \"redux\";\nimport {todolistsReducer} from \"../reducers/todolistsReducer\";\nimport {tasksReducers} from \"../reducers/tasksReducers\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks:tasksReducers,\n})\n export type AppRootStateType = ReturnType<typeof rootReducer>\nexport const store = createStore(rootReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /> </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}