{"version":3,"sources":["EditableSpan.tsx","AddItemForm.tsx","reducers/todolistsReducer.ts","reducers/tasksReducers.ts","TodoListHeader.tsx","Task.tsx","ControlButtons.tsx","TasksList.tsx","ToDoList.tsx","components/ButtonAppBar.tsx","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["EditableSpan","memo","props","useState","edit","setEdit","oldTitle","newTitle","setNewTitle","TextField","id","label","variant","value","onChange","e","currentTarget","autoFocus","onBlur","callBack","size","onClick","className","nameOfClass","AddItemForm","title","setTitle","error","setError","addItem","trim","errorMessage","style","color","fontSize","errorInputClass","onKeyPress","key","Button","sx","maxWidth","maxHeight","minWidth","minHeight","initialState","removeTodoListAC","todolistID","type","payload","v1","TodoListHeader","dispatch","useDispatch","updateTodoListTitleHandler","useCallback","updateTodoListTitleAC","addTaskHandler","newID","addTasksAC","IconButton","removeTodoList","Delete","filter","Task","completedClass","isDone","removeTask","taskID","updateTaskHandler","updateTitle","checked","ControlButtons","onCLickSetFilter","changeFilter","TasksList","filterReducerAC","tasksForTodolist","tasks","t","tasksComponentsList","map","task","emptyMessage","tasksList","length","ToDoList","ButtonAppBar","Box","flexGrow","AppBar","position","Toolbar","edge","mr","Menu","Typography","component","App","todolists","useSelector","state","addTodoList","addNewTodoListAC","Container","fixed","Grid","container","padding","spacing","el","item","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","todolist","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.af4c6768.chunk.js","sourcesContent":["import React , {ChangeEvent , memo , useState} from 'react';\nimport './App.css';\nimport {TextField} from \"@mui/material\";\n\nexport type EditableSpanPropsType = {\n    oldTitle:string\n    nameOfClass: string\n    callBack : (updateTitle:string) => void\n}\nconst EditableSpan = memo((props:EditableSpanPropsType) => {\n    const [edit,setEdit] = useState(false)\n    const [newTitle,setNewTitle] = useState(props.oldTitle)\n    const doubleClickHandler = () => {\n      setEdit(true)\n    }\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\n      setNewTitle(e.currentTarget.value)\n    }\n    const onBlurHandler = () => {\n        props.callBack(newTitle)\n        setEdit(false)\n    }\n    return (\n        edit\n            // ? <input value={newTitle} onChange={onChangeHandler} autoFocus onBlur={onBlurHandler}/>\n            ? <TextField\n                id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\"\n                value={newTitle} onChange={onChangeHandler} autoFocus\n                onBlur={onBlurHandler}\n                size={\"small\"}\n            />\n        :<span onClick={doubleClickHandler} className={props.nameOfClass}>{props.oldTitle}</span>\n    );\n});\n\nexport default EditableSpan;","import React , {useState , KeyboardEvent , ChangeEvent , CSSProperties , memo} from 'react';\nimport {Button , TextField} from \"@mui/material\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\n    const [title , setTitle] = useState<string>('')\n    const [error , setError] = useState<string | boolean>(false)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            addItem()\n            setTitle('')\n        }\n    }\n    const errorMessageStyle: CSSProperties = {\n        color: 'red' ,\n        fontSize: '14px' ,\n    }\n\n    const errorMessage = error\n        ? <div style={errorMessageStyle}>Title is required*</div>\n        : null\n    const errorInputClass = error ? 'error' : ''\n    return (\n        <div>\n            <TextField id=\"outlined-basic\" label={errorInputClass} variant=\"outlined\"\n                       value={title}\n                       onChange={onChangeHandler}\n                       onKeyPress={onKeyPressHandler}\n                       className={errorInputClass}\n                       size={\"small\"}\n                       error={!!errorInputClass}\n                // helperText={error}\n            />\n            <Button onClick={addItem}\n                    variant=\"contained\"\n                    sx={{\n                        maxWidth: '40px' ,\n                        maxHeight: '40px' ,\n                        minWidth: '40px' ,\n                        minHeight: '40px' ,\n                    }}\n            >+</Button>\n            {/*<button onClick={onClickAddTask}>+</button>*/}\n            {errorMessage}\n        </div>\n    );\n});\n\nexport default AddItemForm;","import {FilterValuesType , TodolistsType} from \"../App\";\n\nconst initialState: Array<TodolistsType> = [\n    // {id: todolistID1 , title: 'What to learn' , filter: 'all'} ,\n    // {id: todolistID2 , title: 'What to buy' , filter: 'all'} ,\n]\nexport const todolistsReducer = (state: Array<TodolistsType> = initialState , action: todolistsReducerACType): Array<TodolistsType> => {\n    switch (action.type) {\n        case \"ADD-NEW-TODOLIST\": {\n            let todolist: TodolistsType = {id: action.payload.newID , title: action.payload.title , filter: 'all'}\n            return [todolist , ...state]\n        }\n        case \"CHANGE-FILTER\": {\n            return state.map((el) => el.id === action.payload.todolistID ? {...el , filter: action.payload.value} : el)\n        }\n        case \"UPDATE-TODOLIST-TITLE\": {\n            return state.map((el) => el.id === action.payload.todolistID ? {...el , title: action.payload.title} : el)\n        }\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(el => el.id !== action.payload.todolistID)\n        }\n\n        default:\n            return state\n    }\n}\n\ntype todolistsReducerACType = filterReducerACType | updateTodoListTitleACType | addNewTodoListACType | removeTodoListACType\ntype filterReducerACType = ReturnType<typeof filterReducerAC>\nexport const filterReducerAC = (todolistID: string , value: FilterValuesType) => {\n    return {\n        type: 'CHANGE-FILTER' ,\n        payload: {todolistID , value}\n    } as const\n}\n\ntype updateTodoListTitleACType = ReturnType<typeof updateTodoListTitleAC>\nexport const updateTodoListTitleAC = (todolistID: string , title: string) => {\n    return {\n        type: \"UPDATE-TODOLIST-TITLE\" ,\n        payload: {todolistID , title}\n    } as const\n}\nexport type addNewTodoListACType = ReturnType<typeof addNewTodoListAC>\nexport const addNewTodoListAC = (title: string , newID: string) => {\n    return {\n        type: \"ADD-NEW-TODOLIST\" ,\n        payload: {title , newID}\n    } as const\n}\n\nexport type removeTodoListACType = ReturnType<typeof removeTodoListAC>\nexport const removeTodoListAC = (todolistID: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\" ,\n        payload: {todolistID}\n    } as const\n}\n\n//другой тип описание АС\n// export type RemoveTodolistActionType = {\n//     type: 'REMOVE-TODOLIST',\n//     id: string\n// }\n// export const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n//     return { type: 'REMOVE-TODOLIST', id: todolistId}\n// }","import {TaskType} from \"../ToDoList\";\nimport {addNewTodoListACType , removeTodoListACType} from \"./todolistsReducer\";\nimport {v1} from \"uuid\";\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nexport let todolistID1 = v1();\nexport let todolistID2 = v1();\nconst initialState:TasksStateType = {\n        // [todolistID1]: [\n        //     {id: v1() , title: \"HTML&CSS\" , isDone: true} ,\n        //     {id: v1() , title: \"JS\" , isDone: true} ,\n        //     {id: v1() , title: \"ReactJS\" , isDone: false} ,\n        //     {id: v1() , title: \"Rest API\" , isDone: false} ,\n        //     {id: v1() , title: \"GraphQL\" , isDone: false} ,\n        // ] ,\n        // [todolistID2]: [\n        //     {id: v1() , title: \"Milk\" , isDone: true} ,\n        //     {id: v1() , title: \"Juice\" , isDone: true} ,\n        //     {id: v1() , title: \"blabla\" , isDone: false} ,\n        //     {id: v1() , title: \"smth else\" , isDone: false} ,\n        //     {id: v1() , title: \"bananas\" , isDone: false} ,\n        // ]\n    }\n\nexport const tasksReducers = (state:TasksStateType = initialState,action:tasksReducersAC): TasksStateType =>{\n    switch (action.type){\n        case \"REMOVE-TASKS\":{\n          return  {...state,[action.todolistID]:state[action.todolistID].filter(el=>el.id!==action.taskID)}\n        }\n        case \"ADD-TASKS\":{\n            let task = {id: action.payload.newID, title: action.payload.title, isDone:false}\n            return {\n                ...state,\n                [action.payload.todolistID]: [task,...state[action.payload.todolistID]]\n            }\n        }\n        case \"CHANGE-TASK-STATUS\":{\n            return {...state,[action.payload.todolistID]:\n                    state[action.payload.todolistID].map(el=>el.id===action.payload.taskID?\n                        {...el,isDone:action.payload.isDone}:el)}\n        }\n        case \"UPDATE-TASK\":{\n            return {...state,[action.payload.todolistID]:state[action.payload.todolistID].map(el=>el.id===action.payload.taskID?\n                    {...el,title:action.payload.updateTitle}:el)}\n        }\n        case \"ADD-NEW-TODOLIST\": {\n            return {...state,[action.payload.newID]:[]}\n        }\n        case \"REMOVE-TODOLIST\":{\n            let copyState = {...state}\n            delete copyState[action.payload.todolistID]\n            return copyState\n        }\n        default: return state\n    }\n\n}\n\ntype tasksReducersAC = removeTasksACType | addTasksACType | changeTaskStatusACType |\n    updateTaskACType | removeTodoListACType | addNewTodoListACType |addNewTodolistACType\n\ntype removeTasksACType =  ReturnType<typeof removeTasksAC>\nexport const removeTasksAC = (todolistID:string,taskID: string)=>{\n    return{\n        type: \"REMOVE-TASKS\",\n        todolistID:todolistID,\n        taskID:taskID\n    } as const\n}\n\ntype addTasksACType = ReturnType<typeof addTasksAC>\nexport const addTasksAC = (todolistID:string,title:string,newID:string)=>{\n    return{\n        type: \"ADD-TASKS\",\n        payload:{todolistID,title,newID}\n    }as const\n}\n\ntype changeTaskStatusACType = ReturnType<typeof changeTaskStatusAC>\nexport const changeTaskStatusAC = (todolistID:string,taskID: string, isDone:boolean)=>{\n    return{\n        type: \"CHANGE-TASK-STATUS\",\n        payload:{todolistID,taskID,isDone}\n    }as const\n}\n\ntype updateTaskACType = ReturnType<typeof updateTaskAC>\nexport const updateTaskAC = (todolistID:string,taskID: string, updateTitle:string)=>{\n    return{\n        type: \"UPDATE-TASK\",\n        payload:{todolistID,taskID,updateTitle}\n    }as const\n}\n\n type addNewTodolistACType = ReturnType<typeof updateNewTodolistAC>\n export const updateNewTodolistAC = (newID:string)=>{\n    return{\n        type:\"ADD-NEW-TODOLIST\",\n        payload: {newID}\n    } as const\n}\n\n","import React , {memo , useCallback} from 'react';\nimport {FilterValuesType} from \"./App\";\nimport EditableSpan from \"./EditableSpan\";\nimport AddItemForm from \"./AddItemForm\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {updateTodoListTitleAC} from \"./reducers/todolistsReducer\";\nimport {useDispatch} from \"react-redux\";\nimport {v1} from \"uuid\";\nimport {addTasksAC} from \"./reducers/tasksReducers\";\n\ntype TodoListHeaderPropsType = {\n    title: string\n    filter: FilterValuesType\n    todolistID: string\n    removeTodoList: (todoListID: string) => void\n    //addTask: (todolistID:string,title:string) =>void\n    // updateTodoListTitle:(todolistID:string,title:string)=>void\n}\nconst TodoListHeader = memo((props: TodoListHeaderPropsType) => {\n    const dispatch = useDispatch()\n    const updateTodoListTitleHandler = useCallback((title: string) => {\n        dispatch(updateTodoListTitleAC(props.todolistID , title))\n        //props.updateTodoListTitle(props.todolistID,title)\n    } , [props.todolistID , dispatch])\n\n    const removeTodoList = () => {\n        props.removeTodoList(props.todolistID)\n    }\n    const addTaskHandler = useCallback((title: string) => {\n        let newID = v1()\n        dispatch(addTasksAC(props.todolistID , title , newID))\n        //props.addTask(props.todolistID,title)\n    } , [props.todolistID , dispatch])\n\n    return (\n        <>\n            <h3>\n                <EditableSpan oldTitle={props.title}\n                              nameOfClass={'title'}\n                              callBack={updateTodoListTitleHandler}\n                />\n\n                {/*<button onClick={removeTodoList}>remove all todolist</button>*/}\n                <IconButton aria-label=\"delete\" onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n                <div className='headerFilter'>{props.filter}</div>\n            </h3>\n\n            <AddItemForm addItem={addTaskHandler}\n            />\n        </>\n\n    );\n});\n\nexport default TodoListHeader;","import React , {ChangeEvent , memo , useCallback} from 'react';\nimport {TaskType} from \"./ToDoList\";\nimport EditableSpan from \"./EditableSpan\";\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {changeTaskStatusAC , removeTasksAC , updateTaskAC} from \"./reducers/tasksReducers\";\nimport {useDispatch} from \"react-redux\";\n\nexport type TaskPropType = TaskType & {\n    todolistID:string\n    //removeTask: (todolistID:string,taskID:string)=> void\n    //changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    //updateTask : (todolistID:string,taskID:string,updateTitle:string) => void\n}\n\nconst Task = memo((props: TaskPropType) => {\n    const dispatch = useDispatch()\n    const completedClass = `task ${props.isDone ? 'completedTask' :''}`;\n\n    const removeTask = useCallback(() => {\n        dispatch(removeTasksAC(props.todolistID , props.id))\n    },[dispatch,props.todolistID,props.id])\n\n    const changeTaskStatus = (e:ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeTaskStatusAC(props.todolistID,props.id, e.currentTarget.checked))\n       // props.changeTaskStatus(props.todolistID,props.id,e.currentTarget.checked)\n    }\n    const updateTaskHandler = useCallback((title:string) => {\n        dispatch(updateTaskAC(props.todolistID,props.id,title))\n       //props.updateTask(props.todolistID,props.id,title)\n    },[props,dispatch])\n    return (\n            <li >\n                <input type=\"checkbox\"\n                       onChange={changeTaskStatus}\n                       checked={props.isDone}\n                />\n                <EditableSpan oldTitle = {props.title} nameOfClass = {completedClass}\n                              callBack = {useCallback((title)=>updateTaskHandler(title),[updateTaskHandler])}/>\n                <IconButton aria-label=\"delete\" onClick={removeTask}>\n                    <Delete />\n                </IconButton>\n            </li>\n\n    );\n});\n\nexport default Task;","import React , {memo} from 'react';\nimport {FilterValuesType} from \"./App\";\nimport {Button} from \"@mui/material\";\n\n\ntype ControlButtonsType = {\n    filter:FilterValuesType\n    changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    todolistID:string\n}\nconst ControlButtons = memo((props:ControlButtonsType) => {\n    const onCLickSetFilter = (todolistID:string,filter:FilterValuesType) => () => {\n        props.changeFilter(todolistID,filter)\n    }\n    return (\n        <div>\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"contained\"} color=\"secondary\" onClick={onCLickSetFilter(props.todolistID,'all')}>All</Button>\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"contained\"}  color=\"success\" onClick={onCLickSetFilter(props.todolistID,'active')}>Active</Button>\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"contained\"}  color=\"error\" onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</Button>\n            {/*<button className={props.filter === 'all'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'all')}>All</button>*/}\n            {/*<button  className={props.filter === 'active'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'active')}>Active</button>*/}\n            {/*<button className={props.filter === 'completed'? 'activeBtn':''} onClick={onCLickSetFilter(props.todolistID,'completed')}>Completed</button>*/}\n        </div>\n    );\n});\n\nexport default ControlButtons;","import React , {memo , useCallback} from 'react';\nimport Task from \"./Task\";\nimport {TaskType} from \"./ToDoList\";\nimport ControlButtons from \"./ControlButtons\";\nimport {FilterValuesType} from \"./App\";\nimport {useDispatch} from \"react-redux\";\nimport {filterReducerAC} from \"./reducers/todolistsReducer\";\n\ntype TasksListPropsType = {\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    todolistID:string\n    //removeTask: (todolistID:string,taskID:string)=> void\n    //changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    //changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    //updateTask:(todolistID:string,taskID:string,updateTitle:string) => void\n}\n\nconst TasksList = memo((props: TasksListPropsType) => {\n    const dispatch = useDispatch()\n    const changeFilter = useCallback((todolistID: string , value: FilterValuesType) => {\n        dispatch(filterReducerAC(todolistID , value))\n    },[dispatch])\n\n    let tasksForTodolist = props.tasks\n    if (props.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\n    } else if (props.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\n    }\n\n   const tasksComponentsList = tasksForTodolist.map(task => {\n       return(\n        <Task\n            key={task.id}\n            {...task}  //пройтись мапом по всем компонентам с помощью спреад\n            todolistID = {props.todolistID}\n            // removeTask={removeTask}\n            // changeTaskStatus={changeTaskStatus}\n            // updateTask = {updateTask}\n        />\n       )\n   })\n    const emptyMessage = <span style={{fontSize:'14px'}}>Task list is empty. Change filter or add task.</span>\n    const tasksList =  tasksComponentsList.length\n            ?\n            <ul>\n                {tasksComponentsList}\n            </ul>\n            : emptyMessage\n    return (\n        <>\n            {tasksList}\n            <ControlButtons\n                changeFilter={changeFilter}\n                filter={props.filter}\n                todolistID ={props.todolistID}\n            />\n        </>\n\n);\n});\n\nexport default TasksList;","import React , {memo , useCallback} from 'react';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TasksList from \"./TasksList\";\nimport {FilterValuesType} from \"./App\";\nimport {useDispatch} from \"react-redux\";\nimport {removeTodoListAC} from \"./reducers/todolistsReducer\";\n\ntype ToDoListPropsType = {\n    todolistID: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValuesType\n    //removeTask: (todolistID:string,taskID:string)=> void\n    //changeFilter: (todolistID:string,filter:FilterValuesType)  => void\n    //addTask: (todolistID:string,title:string) =>void\n    //changeTaskStatus:(todolistID:string,taskID: string, isDone:boolean) => void\n    //removeTodoList:(todoListID:string)=>void\n    // updateTask:(todolistID:string,taskID:string,updateTitle:string) => void\n    //updateTodoListTitle:(todolistID:string,title:string)=>void\n}\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n\n}\n\nconst ToDoList = memo((props: ToDoListPropsType) => {\n    const dispatch = useDispatch()\n    const removeTodoList = useCallback((todolistID: string) => {\n        dispatch(removeTodoListAC(todolistID))\n        // @ts-ignore\n        delete props.tasks[todolistID];\n        dispatch(removeTodoListAC(todolistID))\n    } , [dispatch , props.tasks])\n\n\n\n    return (\n        <div className=\"App\">\n\n            <div>\n                <TodoListHeader title={props.title}\n                                filter={props.filter}\n                                todolistID={props.todolistID}\n                                removeTodoList={removeTodoList}\n                                //updateTodoListTitle = {props.updateTodoListTitle}\n                                //addTask = {props.addTask}\n                />\n                <TasksList\n                    tasks={props.tasks}\n                    filter={props.filter}\n                    todolistID={props.todolistID}\n                    //removeTask={props.removeTask}\n                    // changeFilter = {props.changeFilter}\n                    //changeTaskStatus={props.changeTaskStatus}\n                    //updateTask = {props.updateTask}\n\n                />\n            </div>\n        </div>\n    )\n})\n\nexport default ToDoList;","import * as React from 'react';\nimport {AppBar , Box , Button , IconButton  , Toolbar , Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\n\n\nexport default function ButtonAppBar() {\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                    >\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}","import React , {useCallback} from 'react';\r\nimport './App.css';\r\nimport ToDoList from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {addNewTodoListAC} from \"./reducers/todolistsReducer\";\r\nimport {TasksStateType} from \"./reducers/tasksReducers\";\r\nimport ButtonAppBar from \"./components/ButtonAppBar\";\r\nimport {useDispatch , useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {Container , Grid , Paper} from \"@mui/material\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType,Array<TodolistsType>>(state=>state.todolists)\r\n    const tasks = useSelector<AppRootStateType,TasksStateType>(state=>state.tasks)\r\n\r\n\r\n    // const changeFilter = useCallback((todolistID: string , value: FilterValuesType) => {\r\n    //     dispatch(filterReducerAC(todolistID , value))\r\n    // },[dispatch])\r\n\r\n    // const removeTask = useCallback((todolistID: string , taskID: string) => {\r\n    //     dispatch(removeTasksAC(todolistID , taskID))\r\n    //\r\n    // },[dispatch])\r\n\r\n    // const addTask = useCallback((todolistID: string , title: string) => {\r\n    //     let newID = v1()\r\n    //     dispatch(addTasksAC(todolistID , title , newID))\r\n    //\r\n    // },[dispatch])\r\n\r\n    // const changeTaskStatus = useCallback((todolistID: string , taskID: string , isDone: boolean) => {\r\n    //     dispatch(changeTaskStatusAC(todolistID , taskID , isDone))\r\n    // },[dispatch])\r\n\r\n    // const removeTodoList = useCallback((todolistID: string) => {\r\n    //     // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n    //     dispatch(removeTodoListAC(todolistID))\r\n    //     // setTodolists(todolists.filter(el => el.id !== todolistID));\r\n    //     // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n    //     delete tasks[todolistID]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n    //     // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n    //     dispatch(removeTodoListAC(todolistID))\r\n    //     //setTasks({...tasks});\r\n    // },[dispatch,tasks])\r\n\r\n    // const updateTask = useCallback((todolistID: string , taskID: string , updateTitle: string) => {\r\n    //     dispatch(updateTaskAC(todolistID , taskID , updateTitle))\r\n    // },[dispatch])\r\n\r\n    // const updateTodoListTitle = useCallback((todolistID: string , title: string) => {\r\n    //     dispatch(updateTodoListTitleAC(todolistID , title))\r\n    // },[dispatch])\r\n\r\n    const addTodoList = useCallback( (title: string) => {\r\n        let newID = v1()\r\n        dispatch(addNewTodoListAC(title,newID))\r\n\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div>\r\n            <ButtonAppBar/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map((el) => {\r\n                        let tasksForTodolist = tasks[el.id];\r\n                        return (\r\n                            <Grid key={el.id} item>\r\n                                <Paper key={el.id} elevation={6} style={{padding: '10px'}}>\r\n                                    <ToDoList\r\n                                        key={el.id}\r\n                                        todolistID={el.id}\r\n                                        title={el.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        filter={el.filter}\r\n                                        //removeTask={removeTask}\r\n                                        //changeFilter={changeFilter}\r\n                                        //addTask={addTask}\r\n                                        //changeTaskStatus={changeTaskStatus}\r\n                                       // updateTask={updateTask}\r\n                                        //updateTodoListTitle={updateTodoListTitle}\r\n                                        //removeTodoList={removeTodoList}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers , createStore} from \"redux\";\nimport {todolistsReducer} from \"../reducers/todolistsReducer\";\nimport {tasksReducers} from \"../reducers/tasksReducers\";\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks:tasksReducers,\n})\n export type AppRootStateType = ReturnType<typeof rootReducer>\nexport const store = createStore(rootReducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}><App /> </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}